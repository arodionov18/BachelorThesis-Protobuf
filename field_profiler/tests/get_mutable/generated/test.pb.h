// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tracker.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_test_2eproto_metadata_getter(int index);
namespace test {
class ABC;
struct ABCDefaultTypeInternal;
extern ABCDefaultTypeInternal _ABC_default_instance_;
class ABC_Nested;
struct ABC_NestedDefaultTypeInternal;
extern ABC_NestedDefaultTypeInternal _ABC_Nested_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::ABC* Arena::CreateMaybeMessage<::test::ABC>(Arena*);
template<> ::test::ABC_Nested* Arena::CreateMaybeMessage<::test::ABC_Nested>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

// ===================================================================

class ABC_Nested PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.ABC.Nested) */ {
 public:
  inline ABC_Nested() : ABC_Nested(nullptr) {}
  virtual ~ABC_Nested();
  explicit constexpr ABC_Nested(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ABC_Nested(const ABC_Nested& from);
  ABC_Nested(ABC_Nested&& from) noexcept
    : ABC_Nested() {
    *this = ::std::move(from);
  }

  inline ABC_Nested& operator=(const ABC_Nested& from) {
    CopyFrom(from);
    return *this;
  }
  inline ABC_Nested& operator=(ABC_Nested&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ABC_Nested& default_instance() {
    return *internal_default_instance();
  }
  static inline const ABC_Nested* internal_default_instance() {
    return reinterpret_cast<const ABC_Nested*>(
               &_ABC_Nested_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ABC_Nested& a, ABC_Nested& b) {
    a.Swap(&b);
  }
  inline void Swap(ABC_Nested* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ABC_Nested* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ABC_Nested* New() const final {
    return CreateMaybeMessage<ABC_Nested>(nullptr);
  }

  ABC_Nested* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ABC_Nested>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ABC_Nested& from);
  void MergeFrom(const ABC_Nested& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ABC_Nested* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.ABC.Nested";
  }
  protected:
  explicit ABC_Nested(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_test_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  private:
    class Tracker {
    public:
      Tracker() {
        bitmap_ = new std::atomic<uint32_t>[1 / 32 + (1 % 32 != 0)];
        DynamicTracker::RegisterProto(ABC_Nested::default_instance().GetDescriptor(), (std::atomic<uint32_t>**)&bitmap_);
      }
  
      ~Tracker() {
        delete [] bitmap_;
      }
      std::atomic<uint32_t>* bitmap_;
    };
  public:
    static Tracker tracker_;
  // @@protoc_insertion_point(class_scope:test.ABC.Nested)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class ABC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.ABC) */ {
 public:
  inline ABC() : ABC(nullptr) {}
  virtual ~ABC();
  explicit constexpr ABC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ABC(const ABC& from);
  ABC(ABC&& from) noexcept
    : ABC() {
    *this = ::std::move(from);
  }

  inline ABC& operator=(const ABC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ABC& operator=(ABC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ABC& default_instance() {
    return *internal_default_instance();
  }
  static inline const ABC* internal_default_instance() {
    return reinterpret_cast<const ABC*>(
               &_ABC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ABC& a, ABC& b) {
    a.Swap(&b);
  }
  inline void Swap(ABC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ABC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ABC* New() const final {
    return CreateMaybeMessage<ABC>(nullptr);
  }

  ABC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ABC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ABC& from);
  void MergeFrom(const ABC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ABC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.ABC";
  }
  protected:
  explicit ABC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_test_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ABC_Nested Nested;

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kAIndexFieldNumber = 2,
    kANotusedFieldNumber = 3,
    kBFieldNumber = 4,
    kBNotusedFieldNumber = 5,
    kCFieldNumber = 6,
    kCNotusedFieldNumber = 7,
    kDFieldNumber = 8,
    kDNotusedFieldNumber = 9,
  };
  // repeated int64 a = 1;
  int a_size() const;
  private:
  int _internal_a_size() const;
  public:
  void clear_a();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_a(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_a() const;
  void _internal_add_a(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_a();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 a(int index) const;
  void set_a(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_a(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      a() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_a();

  // repeated int64 a_index = 2;
  int a_index_size() const;
  private:
  int _internal_a_index_size() const;
  public:
  void clear_a_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_a_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_a_index() const;
  void _internal_add_a_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_a_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 a_index(int index) const;
  void set_a_index(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_a_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      a_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_a_index();

  // repeated int64 a_notused = 3;
  int a_notused_size() const;
  private:
  int _internal_a_notused_size() const;
  public:
  void clear_a_notused();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_a_notused(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_a_notused() const;
  void _internal_add_a_notused(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_a_notused();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 a_notused(int index) const;
  void set_a_notused(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_a_notused(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      a_notused() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_a_notused();

  // string b = 4;
  void clear_b();
  const std::string& b() const;
  void set_b(const std::string& value);
  void set_b(std::string&& value);
  void set_b(const char* value);
  void set_b(const char* value, size_t size);
  std::string* mutable_b();
  std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // string b_notused = 5;
  void clear_b_notused();
  const std::string& b_notused() const;
  void set_b_notused(const std::string& value);
  void set_b_notused(std::string&& value);
  void set_b_notused(const char* value);
  void set_b_notused(const char* value, size_t size);
  std::string* mutable_b_notused();
  std::string* release_b_notused();
  void set_allocated_b_notused(std::string* b_notused);
  private:
  const std::string& _internal_b_notused() const;
  void _internal_set_b_notused(const std::string& value);
  std::string* _internal_mutable_b_notused();
  public:

  // bytes c = 6;
  void clear_c();
  const std::string& c() const;
  void set_c(const std::string& value);
  void set_c(std::string&& value);
  void set_c(const char* value);
  void set_c(const void* value, size_t size);
  std::string* mutable_c();
  std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // bytes c_notused = 7;
  void clear_c_notused();
  const std::string& c_notused() const;
  void set_c_notused(const std::string& value);
  void set_c_notused(std::string&& value);
  void set_c_notused(const char* value);
  void set_c_notused(const void* value, size_t size);
  std::string* mutable_c_notused();
  std::string* release_c_notused();
  void set_allocated_c_notused(std::string* c_notused);
  private:
  const std::string& _internal_c_notused() const;
  void _internal_set_c_notused(const std::string& value);
  std::string* _internal_mutable_c_notused();
  public:

  // .test.ABC.Nested d = 8;
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  const ::test::ABC_Nested& d() const;
  ::test::ABC_Nested* release_d();
  ::test::ABC_Nested* mutable_d();
  void set_allocated_d(::test::ABC_Nested* d);
  private:
  const ::test::ABC_Nested& _internal_d() const;
  ::test::ABC_Nested* _internal_mutable_d();
  public:
  void unsafe_arena_set_allocated_d(
      ::test::ABC_Nested* d);
  ::test::ABC_Nested* unsafe_arena_release_d();

  // .test.ABC.Nested d_notused = 9;
  bool has_d_notused() const;
  private:
  bool _internal_has_d_notused() const;
  public:
  void clear_d_notused();
  const ::test::ABC_Nested& d_notused() const;
  ::test::ABC_Nested* release_d_notused();
  ::test::ABC_Nested* mutable_d_notused();
  void set_allocated_d_notused(::test::ABC_Nested* d_notused);
  private:
  const ::test::ABC_Nested& _internal_d_notused() const;
  ::test::ABC_Nested* _internal_mutable_d_notused();
  public:
  void unsafe_arena_set_allocated_d_notused(
      ::test::ABC_Nested* d_notused);
  ::test::ABC_Nested* unsafe_arena_release_d_notused();

  private:
    class Tracker {
    public:
      Tracker() {
        bitmap_ = new std::atomic<uint32_t>[9 / 32 + (9 % 32 != 0)];
        DynamicTracker::RegisterProto(ABC::default_instance().GetDescriptor(), (std::atomic<uint32_t>**)&bitmap_);
      }
  
      ~Tracker() {
        delete [] bitmap_;
      }
      std::atomic<uint32_t>* bitmap_;
    };
  public:
    static Tracker tracker_;
  // @@protoc_insertion_point(class_scope:test.ABC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > a_;
  mutable std::atomic<int> _a_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > a_index_;
  mutable std::atomic<int> _a_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > a_notused_;
  mutable std::atomic<int> _a_notused_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_notused_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_notused_;
  ::test::ABC_Nested* d_;
  ::test::ABC_Nested* d_notused_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ABC_Nested

// bool value = 1;
inline void ABC_Nested::clear_value() {
  value_ = false;
}
inline bool ABC_Nested::_internal_value() const {
  return value_;
}
inline bool ABC_Nested::value() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 0));
  // @@protoc_insertion_point(field_get:test.ABC.Nested.value)
  return _internal_value();
}
inline void ABC_Nested::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void ABC_Nested::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:test.ABC.Nested.value)
}

// -------------------------------------------------------------------

// ABC

// repeated int64 a = 1;
inline int ABC::_internal_a_size() const {
  return a_.size();
}
inline int ABC::a_size() const {
  return _internal_a_size();
}
inline void ABC::clear_a() {
  a_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABC::_internal_a(int index) const {
  return a_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABC::a(int index) const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 0));
  // @@protoc_insertion_point(field_get:test.ABC.a)
  return _internal_a(index);
}
inline void ABC::set_a(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  a_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.ABC.a)
}
inline void ABC::_internal_add_a(::PROTOBUF_NAMESPACE_ID::int64 value) {
  a_.Add(value);
}
inline void ABC::add_a(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_a(value);
  // @@protoc_insertion_point(field_add:test.ABC.a)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ABC::_internal_a() const {
  return a_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ABC::a() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 0));
  // @@protoc_insertion_point(field_list:test.ABC.a)
  return _internal_a();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ABC::_internal_mutable_a() {
  return &a_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ABC::mutable_a() {
  // @@protoc_insertion_point(field_mutable_list:test.ABC.a)
  return _internal_mutable_a();
}

// repeated int64 a_index = 2;
inline int ABC::_internal_a_index_size() const {
  return a_index_.size();
}
inline int ABC::a_index_size() const {
  return _internal_a_index_size();
}
inline void ABC::clear_a_index() {
  a_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABC::_internal_a_index(int index) const {
  return a_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABC::a_index(int index) const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 1));
  // @@protoc_insertion_point(field_get:test.ABC.a_index)
  return _internal_a_index(index);
}
inline void ABC::set_a_index(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  a_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.ABC.a_index)
}
inline void ABC::_internal_add_a_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  a_index_.Add(value);
}
inline void ABC::add_a_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_a_index(value);
  // @@protoc_insertion_point(field_add:test.ABC.a_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ABC::_internal_a_index() const {
  return a_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ABC::a_index() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 1));
  // @@protoc_insertion_point(field_list:test.ABC.a_index)
  return _internal_a_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ABC::_internal_mutable_a_index() {
  return &a_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ABC::mutable_a_index() {
  // @@protoc_insertion_point(field_mutable_list:test.ABC.a_index)
  return _internal_mutable_a_index();
}

// repeated int64 a_notused = 3;
inline int ABC::_internal_a_notused_size() const {
  return a_notused_.size();
}
inline int ABC::a_notused_size() const {
  return _internal_a_notused_size();
}
inline void ABC::clear_a_notused() {
  a_notused_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABC::_internal_a_notused(int index) const {
  return a_notused_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABC::a_notused(int index) const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 2));
  // @@protoc_insertion_point(field_get:test.ABC.a_notused)
  return _internal_a_notused(index);
}
inline void ABC::set_a_notused(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  a_notused_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.ABC.a_notused)
}
inline void ABC::_internal_add_a_notused(::PROTOBUF_NAMESPACE_ID::int64 value) {
  a_notused_.Add(value);
}
inline void ABC::add_a_notused(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_a_notused(value);
  // @@protoc_insertion_point(field_add:test.ABC.a_notused)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ABC::_internal_a_notused() const {
  return a_notused_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ABC::a_notused() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 2));
  // @@protoc_insertion_point(field_list:test.ABC.a_notused)
  return _internal_a_notused();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ABC::_internal_mutable_a_notused() {
  return &a_notused_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ABC::mutable_a_notused() {
  // @@protoc_insertion_point(field_mutable_list:test.ABC.a_notused)
  return _internal_mutable_a_notused();
}

// string b = 4;
inline void ABC::clear_b() {
  b_.ClearToEmpty();
}
inline const std::string& ABC::b() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 3));
  // @@protoc_insertion_point(field_get:test.ABC.b)
  return _internal_b();
}
inline void ABC::set_b(const std::string& value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:test.ABC.b)
}
inline std::string* ABC::mutable_b() {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 3));
  // @@protoc_insertion_point(field_mutable:test.ABC.b)
  return _internal_mutable_b();
}
inline const std::string& ABC::_internal_b() const {
  return b_.Get();
}
inline void ABC::_internal_set_b(const std::string& value) {
  
  b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ABC::set_b(std::string&& value) {
  
  b_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test.ABC.b)
}
inline void ABC::set_b(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:test.ABC.b)
}
inline void ABC::set_b(const char* value,
    size_t size) {
  
  b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test.ABC.b)
}
inline std::string* ABC::_internal_mutable_b() {
  
  return b_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ABC::release_b() {
  // @@protoc_insertion_point(field_release:test.ABC.b)
  return b_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ABC::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    
  } else {
    
  }
  b_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), b,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test.ABC.b)
}

// string b_notused = 5;
inline void ABC::clear_b_notused() {
  b_notused_.ClearToEmpty();
}
inline const std::string& ABC::b_notused() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 4));
  // @@protoc_insertion_point(field_get:test.ABC.b_notused)
  return _internal_b_notused();
}
inline void ABC::set_b_notused(const std::string& value) {
  _internal_set_b_notused(value);
  // @@protoc_insertion_point(field_set:test.ABC.b_notused)
}
inline std::string* ABC::mutable_b_notused() {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 4));
  // @@protoc_insertion_point(field_mutable:test.ABC.b_notused)
  return _internal_mutable_b_notused();
}
inline const std::string& ABC::_internal_b_notused() const {
  return b_notused_.Get();
}
inline void ABC::_internal_set_b_notused(const std::string& value) {
  
  b_notused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ABC::set_b_notused(std::string&& value) {
  
  b_notused_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test.ABC.b_notused)
}
inline void ABC::set_b_notused(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  b_notused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:test.ABC.b_notused)
}
inline void ABC::set_b_notused(const char* value,
    size_t size) {
  
  b_notused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test.ABC.b_notused)
}
inline std::string* ABC::_internal_mutable_b_notused() {
  
  return b_notused_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ABC::release_b_notused() {
  // @@protoc_insertion_point(field_release:test.ABC.b_notused)
  return b_notused_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ABC::set_allocated_b_notused(std::string* b_notused) {
  if (b_notused != nullptr) {
    
  } else {
    
  }
  b_notused_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), b_notused,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test.ABC.b_notused)
}

// bytes c = 6;
inline void ABC::clear_c() {
  c_.ClearToEmpty();
}
inline const std::string& ABC::c() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 5));
  // @@protoc_insertion_point(field_get:test.ABC.c)
  return _internal_c();
}
inline void ABC::set_c(const std::string& value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:test.ABC.c)
}
inline std::string* ABC::mutable_c() {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 5));
  // @@protoc_insertion_point(field_mutable:test.ABC.c)
  return _internal_mutable_c();
}
inline const std::string& ABC::_internal_c() const {
  return c_.Get();
}
inline void ABC::_internal_set_c(const std::string& value) {
  
  c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ABC::set_c(std::string&& value) {
  
  c_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test.ABC.c)
}
inline void ABC::set_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:test.ABC.c)
}
inline void ABC::set_c(const void* value,
    size_t size) {
  
  c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test.ABC.c)
}
inline std::string* ABC::_internal_mutable_c() {
  
  return c_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ABC::release_c() {
  // @@protoc_insertion_point(field_release:test.ABC.c)
  return c_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ABC::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test.ABC.c)
}

// bytes c_notused = 7;
inline void ABC::clear_c_notused() {
  c_notused_.ClearToEmpty();
}
inline const std::string& ABC::c_notused() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 6));
  // @@protoc_insertion_point(field_get:test.ABC.c_notused)
  return _internal_c_notused();
}
inline void ABC::set_c_notused(const std::string& value) {
  _internal_set_c_notused(value);
  // @@protoc_insertion_point(field_set:test.ABC.c_notused)
}
inline std::string* ABC::mutable_c_notused() {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 6));
  // @@protoc_insertion_point(field_mutable:test.ABC.c_notused)
  return _internal_mutable_c_notused();
}
inline const std::string& ABC::_internal_c_notused() const {
  return c_notused_.Get();
}
inline void ABC::_internal_set_c_notused(const std::string& value) {
  
  c_notused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ABC::set_c_notused(std::string&& value) {
  
  c_notused_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test.ABC.c_notused)
}
inline void ABC::set_c_notused(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  c_notused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:test.ABC.c_notused)
}
inline void ABC::set_c_notused(const void* value,
    size_t size) {
  
  c_notused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test.ABC.c_notused)
}
inline std::string* ABC::_internal_mutable_c_notused() {
  
  return c_notused_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ABC::release_c_notused() {
  // @@protoc_insertion_point(field_release:test.ABC.c_notused)
  return c_notused_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ABC::set_allocated_c_notused(std::string* c_notused) {
  if (c_notused != nullptr) {
    
  } else {
    
  }
  c_notused_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c_notused,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test.ABC.c_notused)
}

// .test.ABC.Nested d = 8;
inline bool ABC::_internal_has_d() const {
  return this != internal_default_instance() && d_ != nullptr;
}
inline bool ABC::has_d() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 7));
  // @@protoc_insertion_point(field_has:test.ABC.d)
  return _internal_has_d();
}
inline void ABC::clear_d() {
  if (GetArena() == nullptr && d_ != nullptr) {
    delete d_;
  }
  d_ = nullptr;
}
inline const ::test::ABC_Nested& ABC::_internal_d() const {
  const ::test::ABC_Nested* p = d_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::ABC_Nested&>(
      ::test::_ABC_Nested_default_instance_);
}
inline const ::test::ABC_Nested& ABC::d() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 7));
  // @@protoc_insertion_point(field_get:test.ABC.d)
  return _internal_d();
}
inline void ABC::unsafe_arena_set_allocated_d(
    ::test::ABC_Nested* d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(d_);
  }
  d_ = d;
  if (d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.ABC.d)
}
inline ::test::ABC_Nested* ABC::release_d() {
  
  ::test::ABC_Nested* temp = d_;
  d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::test::ABC_Nested* ABC::unsafe_arena_release_d() {
  // @@protoc_insertion_point(field_release:test.ABC.d)
  
  ::test::ABC_Nested* temp = d_;
  d_ = nullptr;
  return temp;
}
inline ::test::ABC_Nested* ABC::_internal_mutable_d() {
  
  if (d_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::ABC_Nested>(GetArena());
    d_ = p;
  }
  return d_;
}
inline ::test::ABC_Nested* ABC::mutable_d() {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 7));
  // @@protoc_insertion_point(field_mutable:test.ABC.d)
  return _internal_mutable_d();
}
inline void ABC::set_allocated_d(::test::ABC_Nested* d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete d_;
  }
  if (d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(d);
    if (message_arena != submessage_arena) {
      d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, d, submessage_arena);
    }
    
  } else {
    
  }
  d_ = d;
  // @@protoc_insertion_point(field_set_allocated:test.ABC.d)
}

// .test.ABC.Nested d_notused = 9;
inline bool ABC::_internal_has_d_notused() const {
  return this != internal_default_instance() && d_notused_ != nullptr;
}
inline bool ABC::has_d_notused() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 8));
  // @@protoc_insertion_point(field_has:test.ABC.d_notused)
  return _internal_has_d_notused();
}
inline void ABC::clear_d_notused() {
  if (GetArena() == nullptr && d_notused_ != nullptr) {
    delete d_notused_;
  }
  d_notused_ = nullptr;
}
inline const ::test::ABC_Nested& ABC::_internal_d_notused() const {
  const ::test::ABC_Nested* p = d_notused_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::ABC_Nested&>(
      ::test::_ABC_Nested_default_instance_);
}
inline const ::test::ABC_Nested& ABC::d_notused() const {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 8));
  // @@protoc_insertion_point(field_get:test.ABC.d_notused)
  return _internal_d_notused();
}
inline void ABC::unsafe_arena_set_allocated_d_notused(
    ::test::ABC_Nested* d_notused) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(d_notused_);
  }
  d_notused_ = d_notused;
  if (d_notused) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.ABC.d_notused)
}
inline ::test::ABC_Nested* ABC::release_d_notused() {
  
  ::test::ABC_Nested* temp = d_notused_;
  d_notused_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::test::ABC_Nested* ABC::unsafe_arena_release_d_notused() {
  // @@protoc_insertion_point(field_release:test.ABC.d_notused)
  
  ::test::ABC_Nested* temp = d_notused_;
  d_notused_ = nullptr;
  return temp;
}
inline ::test::ABC_Nested* ABC::_internal_mutable_d_notused() {
  
  if (d_notused_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::ABC_Nested>(GetArena());
    d_notused_ = p;
  }
  return d_notused_;
}
inline ::test::ABC_Nested* ABC::mutable_d_notused() {
  tracker_.bitmap_[0].store((tracker_.bitmap_[0].load()) | (1U << 8));
  // @@protoc_insertion_point(field_mutable:test.ABC.d_notused)
  return _internal_mutable_d_notused();
}
inline void ABC::set_allocated_d_notused(::test::ABC_Nested* d_notused) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete d_notused_;
  }
  if (d_notused) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(d_notused);
    if (message_arena != submessage_arena) {
      d_notused = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, d_notused, submessage_arena);
    }
    
  } else {
    
  }
  d_notused_ = d_notused;
  // @@protoc_insertion_point(field_set_allocated:test.ABC.d_notused)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
