// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace test {
constexpr ABC_Nested::ABC_Nested(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct ABC_NestedDefaultTypeInternal {
  constexpr ABC_NestedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ABC_NestedDefaultTypeInternal() {}
  union {
    ABC_Nested _instance;
  };
};
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_NO_DESTROY ABC_NestedDefaultTypeInternal _ABC_Nested_default_instance_;
constexpr ABC::ABC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : a_()
  , _a_cached_byte_size_()
  , a_index_()
  , _a_index_cached_byte_size_()
  , a_notused_()
  , _a_notused_cached_byte_size_()
  , b_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , b_notused_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , c_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , c_notused_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , d_(nullptr)
  , d_notused_(nullptr){}
struct ABCDefaultTypeInternal {
  constexpr ABCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ABCDefaultTypeInternal() {}
  union {
    ABC _instance;
  };
};
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_NO_DESTROY ABCDefaultTypeInternal _ABC_default_instance_;
}  // namespace test
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_test_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_test_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::ABC_Nested, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::ABC_Nested, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::ABC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::ABC, a_),
  PROTOBUF_FIELD_OFFSET(::test::ABC, a_index_),
  PROTOBUF_FIELD_OFFSET(::test::ABC, a_notused_),
  PROTOBUF_FIELD_OFFSET(::test::ABC, b_),
  PROTOBUF_FIELD_OFFSET(::test::ABC, b_notused_),
  PROTOBUF_FIELD_OFFSET(::test::ABC, c_),
  PROTOBUF_FIELD_OFFSET(::test::ABC, c_notused_),
  PROTOBUF_FIELD_OFFSET(::test::ABC, d_),
  PROTOBUF_FIELD_OFFSET(::test::ABC, d_notused_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::test::ABC_Nested)},
  { 6, -1, sizeof(::test::ABC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::_ABC_Nested_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::_ABC_default_instance_),
};

const char descriptor_table_protodef_test_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntest.proto\022\004test\"\313\001\n\003ABC\022\t\n\001a\030\001 \003(\003\022\017\n"
  "\007a_index\030\002 \003(\003\022\021\n\ta_notused\030\003 \003(\003\022\t\n\001b\030\004"
  " \001(\t\022\021\n\tb_notused\030\005 \001(\t\022\t\n\001c\030\006 \001(\014\022\021\n\tc_"
  "notused\030\007 \001(\014\022\033\n\001d\030\010 \001(\0132\020.test.ABC.Nest"
  "ed\022#\n\td_notused\030\t \001(\0132\020.test.ABC.Nested\032"
  "\027\n\006Nested\022\r\n\005value\030\001 \001(\010b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_test_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto = {
  false, false, 232, descriptor_table_protodef_test_2eproto, "test.proto", 
  &descriptor_table_test_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_test_2eproto::offsets,
  file_level_metadata_test_2eproto, file_level_enum_descriptors_test_2eproto, file_level_service_descriptors_test_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_test_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_test_2eproto);
  return descriptor_table_test_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_test_2eproto(&descriptor_table_test_2eproto);
namespace test {

// ===================================================================

class ABC_Nested::_Internal {
 public:
};

ABC_Nested::ABC_Nested(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:test.ABC.Nested)
}
ABC_Nested::ABC_Nested(const ABC_Nested& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:test.ABC.Nested)
}

void ABC_Nested::SharedCtor() {
value_ = false;
}

ABC_Nested::~ABC_Nested() {
  // @@protoc_insertion_point(destructor:test.ABC.Nested)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ABC_Nested::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ABC_Nested::ArenaDtor(void* object) {
  ABC_Nested* _this = reinterpret_cast< ABC_Nested* >(object);
  (void)_this;
}
void ABC_Nested::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ABC_Nested::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ABC_Nested::Clear() {
// @@protoc_insertion_point(message_clear_start:test.ABC.Nested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ABC_Nested::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ABC_Nested::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.ABC.Nested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.ABC.Nested)
  return target;
}

size_t ABC_Nested::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.ABC.Nested)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ABC_Nested::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.ABC.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  const ABC_Nested* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ABC_Nested>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.ABC.Nested)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.ABC.Nested)
    MergeFrom(*source);
  }
}

void ABC_Nested::MergeFrom(const ABC_Nested& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.ABC.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void ABC_Nested::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.ABC.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ABC_Nested::CopyFrom(const ABC_Nested& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.ABC.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ABC_Nested::IsInitialized() const {
  return true;
}

void ABC_Nested::InternalSwap(ABC_Nested* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ABC_Nested::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ABC::_Internal {
 public:
  static const ::test::ABC_Nested& d(const ABC* msg);
  static const ::test::ABC_Nested& d_notused(const ABC* msg);
};

const ::test::ABC_Nested&
ABC::_Internal::d(const ABC* msg) {
  return *msg->d_;
}
const ::test::ABC_Nested&
ABC::_Internal::d_notused(const ABC* msg) {
  return *msg->d_notused_;
}
ABC::ABC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  a_(arena),
  a_index_(arena),
  a_notused_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:test.ABC)
}
ABC::ABC(const ABC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      a_(from.a_),
      a_index_(from.a_index_),
      a_notused_(from.a_notused_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_b().empty()) {
    b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_b(), 
      GetArena());
  }
  b_notused_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_b_notused().empty()) {
    b_notused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_b_notused(), 
      GetArena());
  }
  c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c().empty()) {
    c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_c(), 
      GetArena());
  }
  c_notused_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c_notused().empty()) {
    c_notused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_c_notused(), 
      GetArena());
  }
  if (from._internal_has_d()) {
    d_ = new ::test::ABC_Nested(*from.d_);
  } else {
    d_ = nullptr;
  }
  if (from._internal_has_d_notused()) {
    d_notused_ = new ::test::ABC_Nested(*from.d_notused_);
  } else {
    d_notused_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:test.ABC)
}

void ABC::SharedCtor() {
b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
b_notused_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
c_notused_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&d_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&d_notused_) -
    reinterpret_cast<char*>(&d_)) + sizeof(d_notused_));
}

ABC::~ABC() {
  // @@protoc_insertion_point(destructor:test.ABC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ABC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_notused_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_notused_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete d_;
  if (this != internal_default_instance()) delete d_notused_;
}

void ABC::ArenaDtor(void* object) {
  ABC* _this = reinterpret_cast< ABC* >(object);
  (void)_this;
}
void ABC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ABC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ABC::Clear() {
// @@protoc_insertion_point(message_clear_start:test.ABC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_.Clear();
  a_index_.Clear();
  a_notused_.Clear();
  b_.ClearToEmpty();
  b_notused_.ClearToEmpty();
  c_.ClearToEmpty();
  c_notused_.ClearToEmpty();
  if (GetArena() == nullptr && d_ != nullptr) {
    delete d_;
  }
  d_ = nullptr;
  if (GetArena() == nullptr && d_notused_ != nullptr) {
    delete d_notused_;
  }
  d_notused_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ABC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_a(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_a(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 a_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_a_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_a_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 a_notused = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_a_notused(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_a_notused(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test.ABC.b"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string b_notused = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_b_notused();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test.ABC.b_notused"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes c = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes c_notused = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_c_notused();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .test.ABC.Nested d = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .test.ABC.Nested d_notused = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_d_notused(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ABC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.ABC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 a = 1;
  {
    int byte_size = _a_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_a(), byte_size, target);
    }
  }

  // repeated int64 a_index = 2;
  {
    int byte_size = _a_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_a_index(), byte_size, target);
    }
  }

  // repeated int64 a_notused = 3;
  {
    int byte_size = _a_notused_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_a_notused(), byte_size, target);
    }
  }

  // string b = 4;
  if (this->b().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test.ABC.b");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_b(), target);
  }

  // string b_notused = 5;
  if (this->b_notused().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_b_notused().data(), static_cast<int>(this->_internal_b_notused().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test.ABC.b_notused");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_b_notused(), target);
  }

  // bytes c = 6;
  if (this->c().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_c(), target);
  }

  // bytes c_notused = 7;
  if (this->c_notused().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_c_notused(), target);
  }

  // .test.ABC.Nested d = 8;
  if (this->has_d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::d(this), target, stream);
  }

  // .test.ABC.Nested d_notused = 9;
  if (this->has_d_notused()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::d_notused(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.ABC)
  return target;
}

size_t ABC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.ABC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 a = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->a_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _a_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 a_index = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->a_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _a_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 a_notused = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->a_notused_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _a_notused_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string b = 4;
  if (this->b().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_b());
  }

  // string b_notused = 5;
  if (this->b_notused().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_b_notused());
  }

  // bytes c = 6;
  if (this->c().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_c());
  }

  // bytes c_notused = 7;
  if (this->c_notused().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_c_notused());
  }

  // .test.ABC.Nested d = 8;
  if (this->has_d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *d_);
  }

  // .test.ABC.Nested d_notused = 9;
  if (this->has_d_notused()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *d_notused_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ABC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.ABC)
  GOOGLE_DCHECK_NE(&from, this);
  const ABC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ABC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.ABC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.ABC)
    MergeFrom(*source);
  }
}

void ABC::MergeFrom(const ABC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.ABC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  a_.MergeFrom(from.a_);
  a_index_.MergeFrom(from.a_index_);
  a_notused_.MergeFrom(from.a_notused_);
  if (from.b().size() > 0) {
    _internal_set_b(from._internal_b());
  }
  if (from.b_notused().size() > 0) {
    _internal_set_b_notused(from._internal_b_notused());
  }
  if (from.c().size() > 0) {
    _internal_set_c(from._internal_c());
  }
  if (from.c_notused().size() > 0) {
    _internal_set_c_notused(from._internal_c_notused());
  }
  if (from.has_d()) {
    _internal_mutable_d()->::test::ABC_Nested::MergeFrom(from._internal_d());
  }
  if (from.has_d_notused()) {
    _internal_mutable_d_notused()->::test::ABC_Nested::MergeFrom(from._internal_d_notused());
  }
}

void ABC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.ABC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ABC::CopyFrom(const ABC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.ABC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ABC::IsInitialized() const {
  return true;
}

void ABC::InternalSwap(ABC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  a_.InternalSwap(&other->a_);
  a_index_.InternalSwap(&other->a_index_);
  a_notused_.InternalSwap(&other->a_notused_);
  b_.Swap(&other->b_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  b_notused_.Swap(&other->b_notused_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  c_.Swap(&other->c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  c_notused_.Swap(&other->c_notused_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ABC, d_notused_)
      + sizeof(ABC::d_notused_)
      - PROTOBUF_FIELD_OFFSET(ABC, d_)>(
          reinterpret_cast<char*>(&d_),
          reinterpret_cast<char*>(&other->d_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ABC::GetMetadata() const {
  return GetMetadataStatic();
}


ABC::Tracker ABC::tracker_ = {};
ABC_Nested::Tracker ABC_Nested::tracker_ = {};
// @@protoc_insertion_point(namespace_scope)
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test::ABC_Nested* Arena::CreateMaybeMessage< ::test::ABC_Nested >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::ABC_Nested >(arena);
}
template<> PROTOBUF_NOINLINE ::test::ABC* Arena::CreateMaybeMessage< ::test::ABC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::ABC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
